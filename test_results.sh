#!/bin/bash
# test_results.sh - –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤

set -e

echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
echo "=========================================="

# –ö–æ–ª—å–æ—Ä–∏
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() { echo -e "${BLUE}[INFO]${NC} $1"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $1"; }
log_warning() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
log_error() { echo -e "${RED}[ERROR]${NC} $1"; }

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
BASE_URL="http://localhost"
API_URL="http://localhost:8000"
WEB_URL="http://localhost:8002"
TASK_ID=""

# –§—É–Ω–∫—Ü—ñ—ó –¥–æ–ø–æ–º–æ–≥–∏
check_service() {
    local url=$1
    local name=$2
    
    if curl -f -s $url/health > /dev/null 2>&1; then
        log_success "$name –¥–æ—Å—Ç—É–ø–Ω–∏–π"
        return 0
    else
        log_error "$name –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
        return 1
    fi
}

wait_for_analysis() {
    local task_id=$1
    local max_wait=300  # 5 —Ö–≤–∏–ª–∏–Ω
    local count=0
    
    log_info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É $task_id..."
    
    while [ $count -lt $max_wait ]; do
        local status=$(curl -s "$API_URL/status/$task_id" | jq -r '.status' 2>/dev/null || echo "unknown")
        
        case $status in
            "completed")
                log_success "–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                return 0
                ;;
            "failed")
                log_error "–ê–Ω–∞–ª—ñ–∑ –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è"
                return 1
                ;;
            "running"|"pending")
                echo -n "."
                sleep 5
                count=$((count + 5))
                ;;
            *)
                log_warning "–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ç–∞—Ç—É—Å: $status"
                sleep 5
                count=$((count + 5))
                ;;
        esac
    done
    
    echo ""
    log_error "–¢–∞–π–º–∞—É—Ç –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É"
    return 1
}

# 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
test_services() {
    log_info "–¢–µ—Å—Ç 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    
    local failed=0
    
    check_service "http://localhost" "Nginx" || failed=1
    check_service "$WEB_URL" "Web Interface" || failed=1
    check_service "$API_URL" "Analysis Service" || failed=1
    check_service "http://localhost:8001" "Email Service" || failed=1
    
    if [ $failed -eq 0 ]; then
        log_success "–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ"
    else
        log_error "–î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ"
        return 1
    fi
}

# 2. –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É —á–µ—Ä–µ–∑ API
test_analysis_api() {
    log_info "–¢–µ—Å—Ç 2: –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª—ñ–∑—É —á–µ—Ä–µ–∑ API"
    
    local response=$(curl -s -X POST "$API_URL/analyze" \
        -H "Content-Type: application/json" \
        -d '{
            "site_url": "https://example.com",
            "positive_keywords": ["example", "test", "demo"],
            "negative_keywords": ["competitor", "rival"],
            "max_time_minutes": 2,
            "max_links": 20
        }')
    
    if echo "$response" | jq -e '.task_id' > /dev/null 2>&1; then
        TASK_ID=$(echo "$response" | jq -r '.task_id')
        log_success "–ê–Ω–∞–ª—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ: $TASK_ID"
        return 0
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É"
        echo "Response: $response"
        return 1
    fi
}

# 3. –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å—É –∞–Ω–∞–ª—ñ–∑—É
test_analysis_status() {
    log_info "–¢–µ—Å—Ç 3: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∞–Ω–∞–ª—ñ–∑—É"
    
    if [ -z "$TASK_ID" ]; then
        log_error "Task ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        return 1
    fi
    
    local status_response=$(curl -s "$API_URL/status/$TASK_ID")
    
    if echo "$status_response" | jq -e '.status' > /dev/null 2>&1; then
        local status=$(echo "$status_response" | jq -r '.status')
        local message=$(echo "$status_response" | jq -r '.message // "No message"')
        log_success "–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª—ñ–∑—É: $status - $message"
        return 0
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É"
        echo "Response: $status_response"
        return 1
    fi
}

# 4. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
test_wait_completion() {
    log_info "–¢–µ—Å—Ç 4: –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É"
    
    if [ -z "$TASK_ID" ]; then
        log_error "Task ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        return 1
    fi
    
    wait_for_analysis "$TASK_ID"
}

# 5. –¢–µ—Å—Ç –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —á–µ—Ä–µ–∑ API
test_get_result_api() {
    log_info "–¢–µ—Å—Ç 5: –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —á–µ—Ä–µ–∑ API"
    
    if [ -z "$TASK_ID" ]; then
        log_error "Task ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        return 1
    fi
    
    local result_response=$(curl -s "$API_URL/result/$TASK_ID")
    
    if echo "$result_response" | jq -e '.task_id' > /dev/null 2>&1; then
        local pages=$(echo "$result_response" | jq -r '.pages_analyzed // 0')
        local positive=$(echo "$result_response" | jq -r '.positive_matches | length')
        local negative=$(echo "$result_response" | jq -r '.negative_matches | length')
        
        log_success "–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ:"
        log_success "  - –°—Ç–æ—Ä—ñ–Ω–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: $pages"
        log_success "  - –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤: $positive"
        log_success "  - –ù–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤: $negative"
        return 0
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"
        echo "Response: $result_response"
        return 1
    fi
}

# 6. –¢–µ—Å—Ç –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É - –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
test_web_homepage() {
    log_info "–¢–µ—Å—Ç 6: –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –≥–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"
    
    if curl -f -s "$BASE_URL/" | grep -q "–ê–Ω–∞–ª—ñ–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤" 2>/dev/null; then
        log_success "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∞—Ü—é—î"
        return 0
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏"
        return 1
    fi
}

# 7. –¢–µ—Å—Ç —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
test_web_results_page() {
    log_info "–¢–µ—Å—Ç 7: –°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
    
    if curl -f -s "$BASE_URL/results" | grep -q "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑—ñ–≤" 2>/dev/null; then
        log_success "–°—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î"
        return 0
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤"
        return 1
    fi
}

# 8. –¢–µ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É
test_result_detail_page() {
    log_info "–¢–µ—Å—Ç 8: –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É"
    
    if [ -z "$TASK_ID" ]; then
        log_warning "Task ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç"
        return 0
    fi
    
    local status_code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/result/$TASK_ID")
    
    case $status_code in
        200)
            log_success "–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø—Ä–∞—Ü—é—î"
            return 0
            ;;
        202)
            log_info "–ê–Ω–∞–ª—ñ–∑ —â–µ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è (—Ü–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
            return 0
            ;;
        404)
            log_error "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            return 1
            ;;
        *)
            log_error "–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É (–∫–æ–¥: $status_code)"
            return 1
            ;;
    esac
}

# 9. –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É
test_excel_download() {
    log_info "–¢–µ—Å—Ç 9: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É"
    
    if [ -z "$TASK_ID" ]; then
        log_warning "Task ID –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç"
        return 0
    fi
    
    local temp_file="/tmp/test_result.xlsx"
    local status_code=$(curl -s -o "$temp_file" -w "%{http_code}" "$BASE_URL/result/$TASK_ID/download")
    
    case $status_code in
        200)
            if [ -f "$temp_file" ] && [ -s "$temp_file" ]; then
                local file_size=$(wc -c < "$temp_file")
                log_success "Excel —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ (—Ä–æ–∑–º—ñ—Ä: $file_size –±–∞–π—Ç—ñ–≤)"
                rm -f "$temp_file"
                return 0
            else
                log_error "Excel —Ñ–∞–π–ª –ø—É—Å—Ç–∏–π"
                return 1
            fi
            ;;
        202)
            log_info "–ê–Ω–∞–ª—ñ–∑ —â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
            return 0
            ;;
        404)
            log_error "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è"
            return 1
            ;;
        *)
            log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel (–∫–æ–¥: $status_code)"
            return 1
            ;;
    esac
}

# 10. –¢–µ—Å—Ç error pages
test_error_pages() {
    log_info "–¢–µ—Å—Ç 10: –°—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ–º–∏–ª–æ–∫"
    
    # –¢–µ—Å—Ç 404
    local status_code=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/nonexistent-page")
    if [ "$status_code" = "404" ]; then
        log_success "404 —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∞—Ü—é—î"
    else
        log_warning "404 —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –∫–æ–¥: $status_code"
    fi
    
    # –¢–µ—Å—Ç API 404
    local api_status=$(curl -s -o /dev/null -w "%{http_code}" "$BASE_URL/api/analysis/nonexistent")
    if [ "$api_status" = "404" ]; then
        log_success "API 404 –ø—Ä–∞—Ü—é—î"
    else
        log_warning "API 404 –ø–æ–≤–µ—Ä–Ω—É–≤ –∫–æ–¥: $api_status"
    fi
}

# 11. –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤
test_static_files() {
    log_info "–¢–µ—Å—Ç 11: –°—Ç–∞—Ç–∏—á–Ω—ñ —Ñ–∞–π–ª–∏"
    
    # –¢–µ—Å—Ç CSS
    if curl -f -s "$BASE_URL/static/css/style.css" | grep -q "primary-color" 2>/dev/null; then
        log_success "CSS —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    else
        log_warning "CSS —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    fi
    
    # –¢–µ—Å—Ç JS
    if curl -f -s "$BASE_URL/static/js/app.js" | grep -q "CompetitorAnalysisApp" 2>/dev/null; then
        log_success "JS —Ñ–∞–π–ª –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    else
        log_warning "JS —Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    fi
}

# 12. –¢–µ—Å—Ç API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó
test_api_docs() {
    log_info "–¢–µ—Å—Ç 12: API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è"
    
    # Analysis API docs
    if curl -f -s "$API_URL/docs" | grep -q "FastAPI" 2>/dev/null; then
        log_success "Analysis API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        log_warning "Analysis API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
    
    # Email API docs  
    if curl -f -s "http://localhost:8001/docs" | grep -q "FastAPI" 2>/dev/null; then
        log_success "Email API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        log_warning "Email API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü—ñ—è –æ—á–∏—â–µ–Ω–Ω—è
cleanup() {
    log_info "–û—á–∏—â–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö..."
    
    if [ -n "$TASK_ID" ]; then
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–µ—Å—Ç–æ–≤—É –∑–∞–¥–∞—á—É —è–∫—â–æ –º–æ–∂–ª–∏–≤–æ
        curl -s -X DELETE "$API_URL/task/$TASK_ID" > /dev/null 2>&1 || true
    fi
    
    # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏
    rm -f /tmp/test_result.xlsx
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
main() {
    local failed_tests=0
    local total_tests=12
    
    echo "–ó–∞–ø—É—Å–∫ $total_tests —Ç–µ—Å—Ç—ñ–≤..."
    echo ""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
    if ! command -v jq &> /dev/null; then
        log_error "jq –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: apt-get install jq"
        exit 1
    fi
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
    test_services || failed_tests=$((failed_tests + 1))
    test_analysis_api || failed_tests=$((failed_tests + 1))
    test_analysis_status || failed_tests=$((failed_tests + 1))
    test_wait_completion || failed_tests=$((failed_tests + 1))
    test_get_result_api || failed_tests=$((failed_tests + 1))
    test_web_homepage || failed_tests=$((failed_tests + 1))
    test_web_results_page || failed_tests=$((failed_tests + 1))
    test_result_detail_page || failed_tests=$((failed_tests + 1))
    test_excel_download || failed_tests=$((failed_tests + 1))
    test_error_pages || failed_tests=$((failed_tests + 1))
    test_static_files || failed_tests=$((failed_tests + 1))
    test_api_docs || failed_tests=$((failed_tests + 1))
    
    # –û—á–∏—â–µ–Ω–Ω—è
    cleanup
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç
    echo ""
    echo "=================================="
    if [ $failed_tests -eq 0 ]; then
        log_success "–í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ! ‚úÖ"
        echo ""
        echo "üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–≤–Ω—ñ—Å—Ç—é —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω–∞:"
        echo "   ‚Ä¢ –ê–Ω–∞–ª—ñ–∑ —Å–∞–π—Ç—ñ–≤ –ø—Ä–∞—Ü—é—î"
        echo "   ‚Ä¢ –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π"
        echo "   ‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏"
        echo "   ‚Ä¢ Excel —Ñ–∞–π–ª–∏ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è"
        echo "   ‚Ä¢ Error handling –ø—Ä–∞—Ü—é—î"
        exit 0
    else
        log_error "$failed_tests –∑ $total_tests —Ç–µ—Å—Ç—ñ–≤ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—è ‚ùå"
        echo ""
        echo "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:"
        echo "   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤: docker-compose logs"
        echo "   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–∏—Å—Ç–µ–º—É: docker-compose restart"
        echo "   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é .env"
        exit 1
    fi
}

# –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
case "${1:-}" in
    "api")
        test_services
        test_analysis_api
        test_analysis_status
        ;;
    "web")
        test_web_homepage
        test_web_results_page
        test_static_files
        ;;
    "single")
        if [ -n "$2" ]; then
            TASK_ID="$2"
            test_result_detail_page
            test_excel_download
        else
            log_error "–ü–æ—Ç—Ä—ñ–±–µ–Ω Task ID –¥–ª—è single —Ç–µ—Å—Ç—É"
            exit 1
        fi
        ;;
    *)
        main
        ;;
esac
