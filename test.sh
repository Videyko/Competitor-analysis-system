set -e

echo "üß™ –®–≤–∏–¥–∫–∏–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º–∏ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤"
echo "=========================================="

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ Docker –∑–∞–ø—É—â–µ–Ω–∏–π
check_docker() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker..."
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
        exit 1
    fi
    
    log_success "Docker –ø—Ä–∞—Ü—é—î"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–µ—Ä–≤—ñ—Å—ñ–≤
check_services() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    services=(
        "nginx:80:Nginx"
        "analysis-service:8000:Analysis Service" 
        "email-service:8001:Email Service"
        "web-interface:8002:Web Interface"
    )
    
    for service_info in "${services[@]}"; do
        IFS=':' read -r service port name <<< "$service_info"
        
        if curl -f -s http://localhost:$port/health > /dev/null 2>&1; then
            log_success "$name ($port) - OK"
        elif curl -f -s http://localhost:$port/ > /dev/null 2>&1; then
            log_success "$name ($port) - OK (no health endpoint)"
        else
            log_error "$name ($port) - –ù–ï–î–û–°–¢–£–ü–ù–ò–ô"
        fi
    done
}

# –¢–µ—Å—Ç API –∞–Ω–∞–ª—ñ–∑—É
test_analysis_api() {
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Analysis API..."
    
    # –¢–µ—Å—Ç health endpoint
    if curl -f -s http://localhost:8000/health > /dev/null; then
        log_success "Analysis Service health - OK"
    else
        log_error "Analysis Service health - FAIL"
        return 1
    fi
    
    # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É
    log_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É..."
    
    response=$(curl -s -X POST "http://localhost:8000/analyze" \
        -H "Content-Type: application/json" \
        -d '{
            "site_url": "https://example.com",
            "positive_keywords": ["example", "test"],
            "negative_keywords": ["competitor"],
            "max_time_minutes": 2,
            "max_links": 10
        }')
    
    if echo "$response" | grep -q "task_id"; then
        task_id=$(echo "$response" | grep -o '"task_id":"[^"]*"' | cut -d'"' -f4)
        log_success "–ê–Ω–∞–ª—ñ–∑ –∑–∞–ø—É—â–µ–Ω–æ: $task_id"
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å
        sleep 2
        status_response=$(curl -s "http://localhost:8000/status/$task_id")
        if echo "$status_response" | grep -q "status"; then
            status=$(echo "$status_response" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
            log_info "–°—Ç–∞—Ç—É—Å –∞–Ω–∞–ª—ñ–∑—É: $status"
        fi
    else
        log_error "–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É"
        echo "Response: $response"
    fi
}

# –¢–µ—Å—Ç Email API
test_email_api() {
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Email API..."
    
    if curl -f -s http://localhost:8001/health > /dev/null; then
        log_success "Email Service health - OK"
    else
        log_error "Email Service health - FAIL"
    fi
}

# –¢–µ—Å—Ç –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
test_web_interface() {
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É..."
    
    if curl -f -s http://localhost:8002/health > /dev/null; then
        log_success "Web Interface health - OK"
    else
        log_error "Web Interface health - FAIL"
    fi
    
    # –¢–µ—Å—Ç –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    if curl -f -s http://localhost/ > /dev/null; then
        log_success "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        log_warning "–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ nginx"
    fi
    
    # –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    if curl -f -s http://localhost:8002/ > /dev/null; then
        log_success "–í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    else
        log_error "–í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    fi
}

# –¢–µ—Å—Ç –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
test_database() {
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
    
    if docker-compose exec -T postgres pg_isready -U competitor_user > /dev/null 2>&1; then
        log_success "PostgreSQL –¥–æ—Å—Ç—É–ø–Ω–∞"
    else
        log_error "PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
    fi
}

# –¢–µ—Å—Ç Redis
test_redis() {
    log_info "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Redis..."
    
    if docker-compose exec -T redis redis-cli ping > /dev/null 2>&1; then
        log_success "Redis –¥–æ—Å—Ç—É–ø–Ω–∏–π"
    else
        log_error "Redis –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π"
    fi
}

# –ü–æ–∫–∞–∑ –ª–æ–≥—ñ–≤ –ø—Ä–∏ –ø–æ–º–∏–ª–∫–∞—Ö
show_logs() {
    log_info "–û—Å—Ç–∞–Ω–Ω—ñ –ª–æ–≥–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤:"
    echo ""
    
    services=("nginx" "analysis-service" "email-service" "web-interface")
    
    for service in "${services[@]}"; do
        echo "=== $service ==="
        docker-compose logs --tail=5 "$service" 2>/dev/null || echo "–õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ"
        echo ""
    done
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
main() {
    check_docker
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Å–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω—ñ
    if ! docker-compose ps | grep -q "Up"; then
        log_error "–°–µ—Ä–≤—ñ—Å–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ñ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: docker-compose up -d"
        exit 1
    fi
    
    log_info "–û—á—ñ–∫—É—î–º–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 10
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏
    check_services
    test_database
    test_redis
    test_analysis_api
    test_email_api
    test_web_interface
    
    echo ""
    log_success "–¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo ""
    echo "üåê –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost"
    echo "üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:"
    echo "   - Analysis: http://localhost:8000/docs"
    echo "   - Email: http://localhost:8001/docs"
    echo "   - Web: http://localhost:8002/docs"
    echo ""
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –ª–æ–≥–∏ —è–∫—â–æ —î –ø–æ–º–∏–ª–∫–∏
    if docker-compose logs --tail=1 2>/dev/null | grep -i error; then
        log_warning "–ó–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
        show_logs
    fi
}

# –û–ø—Ü—ñ—ó –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
case "${1:-}" in
    "logs")
        show_logs
        ;;
    "services")
        check_services
        ;;
    "api")
        test_analysis_api
        ;;
    *)
        main
        ;;
esac
