set -e

echo "üîß –®–≤–∏–¥–∫–µ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫"
echo "====================================="

# –ö–æ–ª—å–æ—Ä–∏
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

log_info() {
    echo -e "üìù $1"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
create_directories() {
    log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π..."
    
    mkdir -p logs/{nginx,app}
    mkdir -p data/{uploads,exports}
    mkdir -p backups
    mkdir -p nginx/ssl
    mkdir -p monitoring
    
    # –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É
    chmod 755 logs data backups
    chmod 700 nginx/ssl
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É .env —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
create_env_file() {
    if [ ! -f .env ]; then
        log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É..."
        
        cat > .env << 'EOF'
# –û—Å–Ω–æ–≤–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
DOMAIN=localhost
SECRET_KEY=your-very-secure-secret-key-change-this-in-production

# –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö PostgreSQL
POSTGRES_DB=competitor_db
POSTGRES_USER=competitor_user
POSTGRES_PASSWORD=secure-db-password

# Redis
REDIS_PASSWORD=secure-redis-password

# Email –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è (Gmail)
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
EMAIL_USER=your-email@gmail.com
EMAIL_PASSWORD=your-gmail-app-password

# OpenAI –¥–ª—è –®–Ü –∞–Ω–∞–ª—ñ–∑—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
OPENAI_API_KEY=

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É
MAX_WORKERS=5
LOG_LEVEL=INFO

# Grafana
GRAFANA_PASSWORD=admin

# URL –º—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å—ñ–≤
ANALYSIS_SERVICE_URL=http://analysis-service:8000
EMAIL_SERVICE_URL=http://email-service:8001
EOF
        
        log_success ".env —Ñ–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ"
        log_error "–í–ê–ñ–õ–ò–í–û: –ù–∞–ª–∞—à—Ç—É–π—Ç–µ .env —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º!"
    else
        log_success ".env —Ñ–∞–π–ª –≤–∂–µ —ñ—Å–Ω—É—î"
    fi
}

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
fix_permissions() {
    log_info "–í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É..."
    
    # Docker —Ñ–∞–π–ª–∏
    chmod +x scripts/*.sh 2>/dev/null || true
    
    # –õ–æ–≥–∏
    sudo chown -R $USER:$USER logs 2>/dev/null || true
    
    # –î–∞–Ω—ñ
    sudo chown -R $USER:$USER data 2>/dev/null || true
    
    log_success "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ"
}

# –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
cleanup_containers() {
    log_info "–û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    
    # –ó—É–ø–∏–Ω–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    docker-compose down 2>/dev/null || true
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –æ–±—Ä–∞–∑—ñ–≤
    docker image prune -f 2>/dev/null || true
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ—ñ—Å–ø–æ–ª—å–∑—É–≤–∞–Ω–∏—Ö volume (–æ–±–µ—Ä–µ–∂–Ω–æ!)
    # docker volume prune -f 2>/dev/null || true
    
    log_success "–û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker
check_docker() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Docker..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker: https://docs.docker.com/get-docker/"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        echo "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker Compose: https://docs.docker.com/compose/install/"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π"
        exit 1
    fi
    
    log_success "Docker –ø—Ä–∞—Ü—é—î"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ
check_network() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ Docker..."
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ä–µ–∂—É —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
    if ! docker network ls | grep -q "competitor_network"; then
        docker network create competitor_network 2>/dev/null || true
    fi
    
    log_success "–ú–µ—Ä–µ–∂–∞ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É –¥–ª—è localhost
create_ssl_cert() {
    log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É –¥–ª—è localhost..."
    
    if [ ! -f "nginx/ssl/cert.pem" ]; then
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout nginx/ssl/key.pem \
            -out nginx/ssl/cert.pem \
            -subj "/C=UA/ST=Kyiv/L=Kyiv/O=CompetitorAnalysis/CN=localhost" \
            2>/dev/null || true
        
        log_success "SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ"
    else
        log_success "SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –≤–∂–µ —ñ—Å–Ω—É—î"
    fi
}

# –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó nginx
fix_nginx_config() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó nginx..."
    
    if [ ! -f "nginx/conf.d/default.conf" ]; then
        log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó nginx..."
        
        mkdir -p nginx/conf.d
        cat > nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    server_name _;

    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    location / {
        proxy_pass http://web-interface:8002;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    location /api/analysis/ {
        rewrite ^/api/analysis/(.*)$ /$1 break;
        proxy_pass http://analysis-service:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/email/ {
        rewrite ^/api/email/(.*)$ /$1 break;
        proxy_pass http://email-service:8001;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
EOF
        
        log_success "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è nginx —Å—Ç–≤–æ—Ä–µ–Ω–∞"
    else
        log_success "–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è nginx –≤–∂–µ —ñ—Å–Ω—É—î"
    fi
}

# –ü–µ—Ä–µ–∑–±—É–¥–æ–≤–∞ —Ç–∞ –∑–∞–ø—É—Å–∫
rebuild_and_start() {
    log_info "–ü–µ—Ä–µ–∑–±—É–¥–æ–≤–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    # –ó—É–ø–∏–Ω–∫–∞
    docker-compose down 2>/dev/null || true
    
    # –ü–µ—Ä–µ–∑–±—É–¥–æ–≤–∞
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫
    docker-compose up -d
    
    log_success "–°–µ—Ä–≤—ñ—Å–∏ –∑–∞–ø—É—â–µ–Ω–æ"
}

# –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤
wait_for_services() {
    log_info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    max_attempts=60
    attempt=0
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -f -s http://localhost/health > /dev/null 2>&1; then
            log_success "–°–µ—Ä–≤—ñ—Å–∏ –≥–æ—Ç–æ–≤—ñ!"
            return 0
        fi
        
        attempt=$((attempt + 1))
        sleep 5
        echo -n "."
    done
    
    echo ""
    log_error "–°–µ—Ä–≤—ñ—Å–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—è –∑–∞ 5 —Ö–≤–∏–ª–∏–Ω"
    return 1
}

# –ü–æ–∫–∞–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
show_info() {
    echo ""
    echo "üéâ –í–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    echo "========================"
    echo ""
    echo "üåê –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost"
    echo "üìä API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è:"
    echo "   - Analysis: http://localhost:8000/docs"
    echo "   - Email: http://localhost:8001/docs"
    echo "   - Web: http://localhost:8002/docs"
    echo ""
    echo "üîß –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:"
    echo "   docker-compose logs -f                   # –î–∏–≤–∏—Ç–∏—Å—è –ª–æ–≥–∏"
    echo "   docker-compose ps                        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤"
    echo "   docker-compose restart service-name      # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤—ñ—Å—É"
    echo "   ./test.sh                                # –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏"
    echo ""
    echo "‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ email –≤ .env —Ñ–∞–π–ª—ñ!"
}

# –ü–æ–∫–∞–∑ –ø–æ–º–∏–ª–æ–∫
show_errors() {
    echo ""
    log_error "–í–∏–Ω–∏–∫–ª–∏ –ø–æ–º–∏–ª–∫–∏. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏:"
    echo ""
    docker-compose logs --tail=20
}

# –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    check_docker
    create_directories
    create_env_file
    fix_permissions
    check_network
    create_ssl_cert
    fix_nginx_config
    cleanup_containers
    rebuild_and_start
    
    if wait_for_services; then
        show_info
    else
        show_errors
        exit 1
    fi
}

# –ó–∞–ø—É—Å–∫
case "${1:-}" in
    "clean")
        cleanup_containers
        ;;
    "env")
        create_env_file
        ;;
    "dirs")
        create_directories
        ;;
    "ssl")
        create_ssl_cert
        ;;
    "nginx")
        fix_nginx_config
        ;;
    "rebuild")
        rebuild_and_start
        ;;
    *)
        main
        ;;
esac
