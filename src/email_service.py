#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—ñ–≤ –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É
"""

import os
import sys
sys.path.append('/app')

from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.responses import JSONResponse
from pydantic import BaseModel, EmailStr, Field
from typing import List, Dict, Optional
import smtplib
import ssl
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import jinja2
import aiofiles
import asyncio
import uuid
import requests
from io import BytesIO
import pandas as pd
from datetime import datetime

# –õ–æ–∫–∞–ª—å–Ω—ñ —ñ–º–ø–æ—Ä—Ç–∏
from shared.logger import setup_logger
from shared.redis_client import email_redis, email_cache
from shared.utils import generate_task_id

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = setup_logger('email_service')

# Pydantic –º–æ–¥–µ–ª—ñ
class EmailSettings(BaseModel):
    smtp_server: str = Field(..., description="SMTP —Å–µ—Ä–≤–µ—Ä")
    smtp_port: int = Field(default=587, description="SMTP –ø–æ—Ä—Ç")
    email: str = Field(..., description="Email –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞")
    password: str = Field(..., description="–ü–∞—Ä–æ–ª—å –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞")
    use_tls: bool = Field(default=True, description="–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ TLS")

class Recipient(BaseModel):
    email: EmailStr
    name: Optional[str] = None

class EmailRequest(BaseModel):
    recipients: List[Recipient] = Field(..., description="–°–ø–∏—Å–æ–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤")
    subject: str = Field(..., description="–¢–µ–º–∞ –ª–∏—Å—Ç–∞")
    analysis_task_id: str = Field(..., description="ID –∑–∞–¥–∞—á—ñ –∞–Ω–∞–ª—ñ–∑—É")
    analysis_service_url: str = Field(default="http://analysis-service:8000", description="URL —Å–µ—Ä–≤—ñ—Å—É –∞–Ω–∞–ª—ñ–∑—É")
    custom_message: Optional[str] = Field(default=None, description="–î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
    include_attachments: bool = Field(default=True, description="–í–∫–ª—é—á–∏—Ç–∏ –≤–∫–ª–∞–¥–µ–Ω–Ω—è")

class EmailStatus(BaseModel):
    task_id: str
    status: str  # "pending", "sending", "sent", "failed"
    recipients_count: int
    sent_count: int
    failed_count: int
    created_at: datetime
    completed_at: Optional[datetime] = None
    error_message: Optional[str] = None

class EmailService:
    def __init__(self, settings: EmailSettings):
        self.settings = settings
        self.jinja_env = jinja2.Environment(
            loader=jinja2.BaseLoader(),
            autoescape=jinja2.select_autoescape(['html', 'xml'])
        )
        
    async def get_analysis_result(self, task_id: str, service_url: str) -> Dict:
        """–û—Ç—Ä–∏–º—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É –∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤—ñ—Å—É"""
        try:
            response = requests.get(f"{service_url}/result/{task_id}")
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –∞–Ω–∞–ª—ñ–∑—É: {e}")
            raise HTTPException(status_code=400, detail=f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É: {e}")
    
    def generate_html_report(self, analysis_result: Dict, custom_message: str = None) -> str:
        """–ì–µ–Ω–µ—Ä—É—î HTML –∑–≤—ñ—Ç"""
        template = """
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>–ó–≤—ñ—Ç –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; color: #333; }
        .header { background: #2c3e50; color: white; padding: 20px; border-radius: 5px; }
        .summary { background: #ecf0f1; padding: 15px; border-radius: 5px; margin: 20px 0; }
        .section { margin: 20px 0; }
        .positive { color: #27ae60; }
        .negative { color: #e74c3c; }
        .stats { display: flex; gap: 20px; flex-wrap: wrap; }
        .stat-card { background: #f8f9fa; padding: 15px; border-radius: 5px; min-width: 200px; }
        .keyword-list { background: #fff; border: 1px solid #ddd; border-radius: 5px; padding: 10px; margin: 10px 0; }
        .context { font-style: italic; color: #666; font-size: 0.9em; }
        .ai-analysis { background: #e8f5e8; padding: 15px; border-radius: 5px; border-left: 4px solid #27ae60; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
        .url { color: #3498db; text-decoration: none; }
        .url:hover { text-decoration: underline; }
        .card { background: #fff; border: 1px solid #ddd; border-radius: 5px; padding: 15px; margin: 10px 0; }
        .card-header { background: #f8f9fa; padding: 10px; margin: -15px -15px 15px -15px; border-radius: 5px 5px 0 0; border-bottom: 1px solid #ddd; }
        .alert-warning { background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 5px; padding: 15px; margin: 10px 0; }
        .alert-success { background: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; padding: 15px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üîç –ó–≤—ñ—Ç –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤</h1>
        <p>–ê–Ω–∞–ª—ñ–∑ —Å–∞–π—Ç—É: <strong>{{ analysis_result.site_url }}</strong></p>
        <p>–î–∞—Ç–∞: {{ analysis_result.completed_at }}</p>
    </div>

    {% if custom_message %}
    <div class="section">
        <h2>üìù –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è</h2>
        <p>{{ custom_message }}</p>
    </div>
    {% endif %}

    <div class="summary">
        <h2>üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h2>
        <div class="stats">
            <div class="stat-card">
                <h3>–°—Ç–æ—Ä—ñ–Ω–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ</h3>
                <p style="font-size: 2em; margin: 0;"><strong>{{ analysis_result.pages_analyzed }}</strong></p>
            </div>
            <div class="stat-card">
                <h3 class="positive">–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –∑–±—ñ–≥–∏</h3>
                <p style="font-size: 2em; margin: 0;"><strong>{{ analysis_result.summary_stats.positive_keywords_found }}</strong></p>
            </div>
            <div class="stat-card">
                <h3 class="negative">–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –∑–±—ñ–≥–∏</h3>
                <p style="font-size: 2em; margin: 0;"><strong>{{ analysis_result.summary_stats.negative_keywords_found }}</strong></p>
            </div>
            <div class="stat-card">
                <h3>–ß–∞—Å –∞–Ω–∞–ª—ñ–∑—É</h3>
                <p style="font-size: 2em; margin: 0;"><strong>{{ analysis_result.summary_stats.analysis_time_seconds }}—Å</strong></p>
            </div>
        </div>
        
        {% if analysis_result.detailed_stats and analysis_result.detailed_stats.summary %}
        <hr>
        <div class="stats">
            <div class="stat-card">
                <h4>–ö–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞:</h4>
                <p>
                    <span class="positive">‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {{ analysis_result.detailed_stats.summary.found_keywords }}/{{ analysis_result.detailed_stats.summary.total_keywords }}</span><br>
                    <span class="negative">‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {{ analysis_result.detailed_stats.summary.not_found_keywords }}</span>
                </p>
            </div>
            <div class="stat-card">
                <h4>–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ —Å–ª–æ–≤–∞:</h4>
                <p>
                    <span class="negative">‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ: {{ analysis_result.detailed_stats.summary.found_forbidden }}/{{ analysis_result.detailed_stats.summary.total_forbidden }}</span><br>
                    <span class="positive">‚úÖ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {{ analysis_result.detailed_stats.summary.not_found_forbidden }}</span>
                </p>
            </div>
        </div>
        {% endif %}
    </div>

    {% if analysis_result.positive_matches %}
    <div class="section">
        <h2 class="positive">‚úÖ –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞</h2>
        
        {% if analysis_result.detailed_stats and analysis_result.detailed_stats.keyword_stats %}
        <div class="card">
            <div class="card-header">
                <h5>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö</h5>
            </div>
            <div class="card-body">
                {% for keyword, stats in analysis_result.detailed_stats.keyword_stats.items() %}
                    {% if stats.total_mentions > 0 %}
                    <div style="margin-bottom: 20px;">
                        <h6 class="positive">üîç "{{ keyword }}" - {{ stats.total_mentions }} –∑–≥–∞–¥–æ–∫ –Ω–∞ {{ stats.pages_found|length }} —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö</h6>
                        <ul>
                            {% for page in stats.pages_found %}
                            <li>
                                <a href="{{ page.url }}" class="url">{{ page.url }}</a> 
                                ({{ page.count }} —Ä–∞–∑—ñ–≤)
                                <br><small class="context">{{ page.context }}</small>
                            </li>
                            {% endfor %}
                        </ul>
                    </div>
                    {% endif %}
                {% endfor %}
            </div>
        </div>
        {% endif %}
        
        <table>
            <thead>
                <tr>
                    <th>–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ</th>
                    <th>URL</th>
                    <th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
                    <th>–ö–æ–Ω—Ç–µ–∫—Å—Ç</th>
                </tr>
            </thead>
            <tbody>
                {% for match in analysis_result.positive_matches %}
                <tr>
                    <td><strong>{{ match.keyword }}</strong></td>
                    <td><a href="{{ match.url }}" class="url">{{ match.url }}</a></td>
                    <td>{{ match.count }}</td>
                    <td class="context">{{ match.context }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% endif %}
    
    {% if analysis_result.detailed_stats and analysis_result.detailed_stats.not_found_keywords %}
    <div class="section">
        <h2 class="negative">‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞</h2>
        <div class="alert-warning">
            <h6>–ù–∞—Å—Ç—É–ø–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –Ω–µ –±—É–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞ —Å–∞–π—Ç—ñ:</h6>
            <ul>
                {% for keyword in analysis_result.detailed_stats.not_found_keywords %}
                <li><strong>"{{ keyword }}"</strong></li>
                {% endfor %}
            </ul>
            <p><em>–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è:</em></p>
            <ul>
                <li>–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤</li>
                <li>–†–æ–∑–≥–ª—è–Ω—É—Ç–∏ —Å–∏–Ω–æ–Ω—ñ–º–∏ –∞–±–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏</li>
                <li>–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —â–æ–¥–æ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ –∑–≥–∞–¥–æ–∫</li>
            </ul>
        </div>
    </div>
    {% endif %}

    {% if analysis_result.negative_matches %}
    <div class="section">
        <h2 class="negative">‚ùå –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞</h2>
        
        {% if analysis_result.detailed_stats and analysis_result.detailed_stats.forbidden_stats %}
        <div class="card" style="border-left: 4px solid #e74c3c;">
            <div class="card-header">
                <h5>–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö —Å–ª–æ–≤–∞—Ö</h5>
            </div>
            <div class="card-body">
                {% for keyword, stats in analysis_result.detailed_stats.forbidden_stats.items() %}
                    {% if stats.total_mentions > 0 %}
                    <div style="margin-bottom: 20px;">
                        <h6 class="negative">‚ö†Ô∏è "{{ keyword }}" - {{ stats.total_mentions }} –∑–≥–∞–¥–æ–∫ –Ω–∞ {{ stats.pages_found|length }} —Å—Ç–æ—Ä—ñ–Ω–∫–∞—Ö</h6>
                        <ul>
                            {% for page in stats.pages_found %}
                            <li>
                                <a href="{{ page.url }}" class="url">{{ page.url }}</a> 
                                ({{ page.count }} —Ä–∞–∑—ñ–≤)
                                <br><small class="context">{{ page.context }}</small>
                            </li>
                            {% endfor %}
                        </ul>
                    </div>
                    {% endif %}
                {% endfor %}
            </div>
        </div>
        {% endif %}
        
        <table>
            <thead>
                <tr>
                    <th>–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ</th>
                    <th>URL</th>
                    <th>–ö—ñ–ª—å–∫—ñ—Å—Ç—å</th>
                    <th>–ö–æ–Ω—Ç–µ–∫—Å—Ç</th>
                </tr>
            </thead>
            <tbody>
                {% for match in analysis_result.negative_matches %}
                <tr>
                    <td><strong>{{ match.keyword }}</strong></td>
                    <td><a href="{{ match.url }}" class="url">{{ match.url }}</a></td>
                    <td>{{ match.count }}</td>
                    <td class="context">{{ match.context }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
    {% endif %}
    
    {% if analysis_result.detailed_stats and analysis_result.detailed_stats.not_found_forbidden %}
    <div class="section">
        <h2 class="positive">‚úÖ –•–æ—Ä–æ—à–∞ –Ω–æ–≤–∏–Ω–∞!</h2>
        <div class="alert-success">
            <h6>–ù–∞—Å—Ç—É–ø–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –ù–ï –±—É–ª–∏ –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞ —Å–∞–π—Ç—ñ:</h6>
            <ul>
                {% for keyword in analysis_result.detailed_stats.not_found_forbidden %}
                <li><strong>"{{ keyword }}"</strong></li>
                {% endfor %}
            </ul>
            <p><em>–¶–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ - –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–µ –∑–≥–∞–¥—É—î –≤–∞—à–∏—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤!</em></p>
        </div>
    </div>
    {% endif %}

    {% if analysis_result.ai_analysis %}
    <div class="section">
        <h2>ü§ñ –®–Ü –ê–Ω–∞–ª—ñ–∑</h2>
        <div class="ai-analysis">
            <pre>{{ analysis_result.ai_analysis }}</pre>
        </div>
    </div>
    {% endif %}

    <div class="section">
        <h2>üîó –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è</h2>
        <h3 class="positive">–°—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:</h3>
        <ul>
        {% for url in analysis_result.pages_with_positive %}
            <li><a href="{{ url }}" class="url">{{ url }}</a></li>
        {% endfor %}
        </ul>
        
        {% if analysis_result.pages_with_negative %}
        <h3 class="negative">–°—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–º–∏ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏:</h3>
        <ul>
        {% for url in analysis_result.pages_with_negative %}
            <li><a href="{{ url }}" class="url">{{ url }}</a></li>
        {% endfor %}
        </ul>
        {% endif %}
    </div>

    <div class="section">
        <p><em>–ó–≤—ñ—Ç –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å–∏—Å—Ç–µ–º–æ—é –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤</em></p>
    </div>
</body>
</html>
        """
        
        jinja_template = self.jinja_env.from_string(template)
        return jinja_template.render(
            analysis_result=analysis_result,
            custom_message=custom_message
        )
    
    def create_excel_attachment(self, analysis_result: Dict) -> BytesIO:
        """–°—Ç–≤–æ—Ä—é—î Excel —Ñ–∞–π–ª –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
        output = BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            # –ü–æ–∑–∏—Ç–∏–≤–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
            if analysis_result.get('positive_matches'):
                positive_df = pd.DataFrame([
                    {
                        '–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ': match['keyword'],
                        'URL': match['url'],
                        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å': match['count'],
                        '–ö–æ–Ω—Ç–µ–∫—Å—Ç': match['context']
                    }
                    for match in analysis_result['positive_matches']
                ])
                positive_df.to_excel(writer, sheet_name='–ü–æ–∑–∏—Ç–∏–≤–Ω—ñ', index=False)
            
            # –ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
            if analysis_result.get('negative_matches'):
                negative_df = pd.DataFrame([
                    {
                        '–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ': match['keyword'],
                        'URL': match['url'],
                        '–ö—ñ–ª—å–∫—ñ—Å—Ç—å': match['count'],
                        '–ö–æ–Ω—Ç–µ–∫—Å—Ç': match['context']
                    }
                    for match in analysis_result['negative_matches']
                ])
                negative_df.to_excel(writer, sheet_name='–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ', index=False)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª—é—á–æ–≤–∏—Ö —Å–ª–æ–≤–∞—Ö
            if analysis_result.get('detailed_stats') and analysis_result['detailed_stats'].get('keyword_stats'):
                keyword_stats_data = []
                for keyword, stats in analysis_result['detailed_stats']['keyword_stats'].items():
                    if stats['total_mentions'] > 0:
                        for page in stats['pages_found']:
                            keyword_stats_data.append({
                                '–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ': keyword,
                                '–í—Å—å–æ–≥–æ –∑–≥–∞–¥–æ–∫': stats['total_mentions'],
                                '–°—Ç–æ—Ä—ñ–Ω–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ': len(stats['pages_found']),
                                'URL': page['url'],
                                '–ó–≥–∞–¥–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ': page['count'],
                                '–ö–æ–Ω—Ç–µ–∫—Å—Ç': page['context']
                            })
                
                if keyword_stats_data:
                    keyword_stats_df = pd.DataFrame(keyword_stats_data)
                    keyword_stats_df.to_excel(writer, sheet_name='–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö', index=False)
            
            # –î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö —Å–ª–æ–≤–∞—Ö
            if analysis_result.get('detailed_stats') and analysis_result['detailed_stats'].get('forbidden_stats'):
                forbidden_stats_data = []
                for keyword, stats in analysis_result['detailed_stats']['forbidden_stats'].items():
                    if stats['total_mentions'] > 0:
                        for page in stats['pages_found']:
                            forbidden_stats_data.append({
                                '–ù–µ–≥–∞—Ç–∏–≤–Ω–µ —Å–ª–æ–≤–æ': keyword,
                                '–í—Å—å–æ–≥–æ –∑–≥–∞–¥–æ–∫': stats['total_mentions'],
                                '–°—Ç–æ—Ä—ñ–Ω–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ': len(stats['pages_found']),
                                'URL': page['url'],
                                '–ó–≥–∞–¥–æ–∫ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ': page['count'],
                                '–ö–æ–Ω—Ç–µ–∫—Å—Ç': page['context']
                            })
                
                if forbidden_stats_data:
                    forbidden_stats_df = pd.DataFrame(forbidden_stats_data)
                    forbidden_stats_df.to_excel(writer, sheet_name='–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö', index=False)
            
            # –ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —Å–ª–æ–≤–∞
            if analysis_result.get('detailed_stats'):
                not_found_data = []
                
                # –ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –ø–æ–∑–∏—Ç–∏–≤–Ω—ñ —Å–ª–æ–≤–∞
                if analysis_result['detailed_stats'].get('not_found_keywords'):
                    for keyword in analysis_result['detailed_stats']['not_found_keywords']:
                        not_found_data.append({
                            '–¢–∏–ø': '–ü–æ–∑–∏—Ç–∏–≤–Ω–µ',
                            '–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ': keyword,
                            '–°—Ç–∞—Ç—É—Å': '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                            '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è': '–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–Ω—è –∞–±–æ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞'
                        })
                
                # –ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ñ —Å–ª–æ–≤–∞
                if analysis_result['detailed_stats'].get('not_found_forbidden'):
                    for keyword in analysis_result['detailed_stats']['not_found_forbidden']:
                        not_found_data.append({
                            '–¢–∏–ø': '–ù–µ–≥–∞—Ç–∏–≤–Ω–µ',
                            '–ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ': keyword,
                            '–°—Ç–∞—Ç—É—Å': '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ',
                            '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è': '–ü–æ–∑–∏—Ç–∏–≤–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ - –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç –Ω–µ –∑–≥–∞–¥—É—î—Ç—å—Å—è'
                        })
                
                if not_found_data:
                    not_found_df = pd.DataFrame(not_found_data)
                    not_found_df.to_excel(writer, sheet_name='–ù–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —Å–ª–æ–≤–∞', index=False)
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_data = [
                ['–°–∞–π—Ç', analysis_result['site_url']],
                ['–°—Ç–æ—Ä—ñ–Ω–æ–∫ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–æ', analysis_result['pages_analyzed']],
                ['–ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤', analysis_result['summary_stats']['positive_keywords_found']],
                ['–ù–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∑–±—ñ–≥—ñ–≤', analysis_result['summary_stats']['negative_keywords_found']],
                ['–ß–∞—Å –∞–Ω–∞–ª—ñ–∑—É (—Å–µ–∫)', analysis_result['summary_stats']['analysis_time_seconds']],
                ['–î–∞—Ç–∞ –∞–Ω–∞–ª—ñ–∑—É', analysis_result['completed_at']]
            ]
            
            # –î–æ–¥–∞—î–º–æ –¥–µ—Ç–∞–ª—å–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if analysis_result.get('detailed_stats') and analysis_result['detailed_stats'].get('summary'):
                summary = analysis_result['detailed_stats']['summary']
                stats_data.extend([
                    ['', ''],
                    ['=== –î–ï–¢–ê–õ–¨–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===', ''],
                    ['–í—Å—å–æ–≥–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Å–ª—ñ–≤', summary['total_keywords']],
                    ['–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Å–ª—ñ–≤', summary['found_keywords']],
                    ['–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö —Å–ª—ñ–≤', summary['not_found_keywords']],
                    ['–í—Å—å–æ–≥–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö —Å–ª—ñ–≤', summary['total_forbidden']],
                    ['–ó–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö —Å–ª—ñ–≤', summary['found_forbidden']],
                    ['–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö —Å–ª—ñ–≤', summary['not_found_forbidden']]
                ])
            
            stats_df = pd.DataFrame(stats_data, columns=['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–Ω—è'])
            stats_df.to_excel(writer, sheet_name='–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        output.seek(0)
        return output
    
    def send_email(self, recipient: Recipient, subject: str, html_content: str, 
                   attachments: List[tuple] = None) -> bool:
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î email –æ–¥–Ω–æ–º—É –æ—Ç—Ä–∏–º—É–≤–∞—á—É"""
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            message = MIMEMultipart("alternative")
            message["Subject"] = subject
            message["From"] = self.settings.email
            message["To"] = recipient.email
            
            # –î–æ–¥–∞—î–º–æ HTML –∫–æ–Ω—Ç–µ–Ω—Ç
            html_part = MIMEText(html_content, "html", "utf-8")
            message.attach(html_part)
            
            # –î–æ–¥–∞—î–º–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è
            if attachments:
                for filename, content in attachments:
                    attachment = MIMEBase('application', 'octet-stream')
                    attachment.set_payload(content.read())
                    encoders.encode_base64(attachment)
                    attachment.add_header(
                        'Content-Disposition',
                        f'attachment; filename= {filename}'
                    )
                    message.attach(attachment)
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email
            context = ssl.create_default_context()
            with smtplib.SMTP(self.settings.smtp_server, self.settings.smtp_port) as server:
                if self.settings.use_tls:
                    server.starttls(context=context)
                server.login(self.settings.email, self.settings.password)
                server.send_message(message)
            
            logger.info(f"Email –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ {recipient.email}")
            return True
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email –¥–æ {recipient.email}: {e}")
            return False

# FastAPI –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫
app = FastAPI(
    title="Email Report Service",
    description="–ú—ñ–∫—Ä–æ—Å–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∑–≤—ñ—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É",
    version="1.0.0"
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è email (–º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è)
email_settings = EmailSettings(
    smtp_server=os.getenv("SMTP_SERVER", "smtp.gmail.com"),
    smtp_port=int(os.getenv("SMTP_PORT", "587")),
    email=os.getenv("EMAIL_USER", "your-email@gmail.com"),
    password=os.getenv("EMAIL_PASSWORD", "your-app-password"),
    use_tls=True
)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
email_tasks = {}
email_service = EmailService(email_settings)

@app.get("/")
async def root():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    return {
        "message": "Email Report Service",
        "version": "1.0.0",
        "status": "running"
    }

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/send-report")
async def send_report(request: EmailRequest, background_tasks: BackgroundTasks):
    """
    –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–≤—ñ—Ç –∞–Ω–∞–ª—ñ–∑—É –Ω–∞ email
    """
    task_id = generate_task_id()
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á—ñ
    email_tasks[task_id] = EmailStatus(
        task_id=task_id,
        status="pending",
        recipients_count=len(request.recipients),
        sent_count=0,
        failed_count=0,
        created_at=datetime.now()
    )
    
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ
    background_tasks.add_task(
        perform_email_sending,
        task_id,
        request
    )
    
    return {
        "task_id": task_id,
        "status": "pending",
        "message": f"–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–≤—ñ—Ç—É –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ –¥–ª—è {len(request.recipients)} –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤"
    }

async def perform_email_sending(task_id: str, request: EmailRequest):
    """
    –í–∏–∫–æ–Ω—É—î –≤—ñ–¥–ø—Ä–∞–≤–∫—É email
    """
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        email_tasks[task_id].status = "sending"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª—ñ–∑—É
        analysis_result = await email_service.get_analysis_result(
            request.analysis_task_id, 
            request.analysis_service_url
        )
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ HTML –∑–≤—ñ—Ç
        html_content = email_service.generate_html_report(
            analysis_result, 
            request.custom_message
        )
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–µ–Ω–Ω—è
        attachments = []
        if request.include_attachments:
            excel_file = email_service.create_excel_attachment(analysis_result)
            filename = f"analysis_report_{analysis_result['site_url'].replace('https://', '').replace('/', '_')}.xlsx"
            attachments.append((filename, excel_file))
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ email –∫–æ–∂–Ω–æ–º—É –æ—Ç—Ä–∏–º—É–≤–∞—á—É
        for recipient in request.recipients:
            success = email_service.send_email(
                recipient=recipient,
                subject=request.subject,
                html_content=html_content,
                attachments=attachments
            )
            
            if success:
                email_tasks[task_id].sent_count += 1
            else:
                email_tasks[task_id].failed_count += 1
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        email_tasks[task_id].status = "sent"
        email_tasks[task_id].completed_at = datetime.now()
        
        logger.info(f"–í—ñ–¥–ø—Ä–∞–≤–∫—É email {task_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ email {task_id}: {e}")
        
        email_tasks[task_id].status = "failed"
        email_tasks[task_id].error_message = str(e)
        email_tasks[task_id].completed_at = datetime.now()

@app.get("/status/{task_id}", response_model=EmailStatus)
async def get_email_status(task_id: str):
    """
    –û—Ç—Ä–∏–º—É—î —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ email
    """
    if task_id not in email