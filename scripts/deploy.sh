#!/bin/bash
# deploy.sh - –û—Å–Ω–æ–≤–Ω–∏–π —Å–∫—Ä–∏–ø—Ç —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è

set -e

echo "üöÄ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –∞–Ω–∞–ª—ñ–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ñ–≤ –Ω–∞ DigitalOcean"
echo "============================================================"

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
check_dependencies() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker —Ç–∞ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É."
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Docker Compose —Ç–∞ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É."
        exit 1
    fi
    
    log_success "–í—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .env —Ñ–∞–π–ª—É
setup_environment() {
    log_info "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."
    
    if [ ! -f .env ]; then
        if [ -f .env.example ]; then
            cp .env.example .env
            log_warning "–°—Ç–≤–æ—Ä–µ–Ω–æ .env —Ñ–∞–π–ª –∑ –ø—Ä–∏–∫–ª–∞–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –π–æ–≥–æ –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è–º."
            echo ""
            echo "–†–µ–¥–∞–≥—É–π—Ç–µ —Ñ–∞–π–ª .env —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è:"
            echo "- DOMAIN (–≤–∞—à –¥–æ–º–µ–Ω)"
            echo "- SECRET_KEY (–±–µ–∑–ø–µ—á–Ω–∏–π –∫–ª—é—á)"
            echo "- –ü–∞—Ä–æ–ª—ñ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ Redis"
            echo "- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è email"
            echo "- OpenAI API –∫–ª—é—á (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"
            echo ""
            read -p "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –ø—ñ—Å–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É..."
        else
            log_error ".env.example —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            exit 1
        fi
    fi
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
    source .env
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö
    required_vars=("DOMAIN" "SECRET_KEY" "POSTGRES_PASSWORD" "REDIS_PASSWORD" "EMAIL_USER" "EMAIL_PASSWORD")
    for var in "${required_vars[@]}"; do
        if [ -z "${!var}" ]; then
            log_error "–ó–º—ñ–Ω–Ω–∞ $var –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª—ñ"
            exit 1
        fi
    done
    
    log_success "–°–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
create_directories() {
    log_info "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π..."
    
    mkdir -p logs/{nginx,app}
    mkdir -p data/{uploads,exports}
    mkdir -p backups
    mkdir -p nginx/ssl
    
    # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
    chmod 755 logs data backups
    chmod 700 nginx/ssl
    
    log_success "–î–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–æ"
}

# –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤
setup_ssl() {
    log_info "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è SSL..."
    
    if [ "$DOMAIN" != "localhost" ] && [ ! -f "nginx/ssl/cert.pem" ]; then
        log_info "–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è self-signed SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É –¥–ª—è $DOMAIN"
        
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout nginx/ssl/key.pem \
            -out nginx/ssl/cert.pem \
            -subj "/C=UA/ST=Kyiv/L=Kyiv/O=CompetitorAnalysis/CN=$DOMAIN"
        
        log_success "SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ"
        log_warning "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è self-signed —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ Let's Encrypt"
    else
        log_info "SSL –≤–∂–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è localhost"
    fi
}

# –ó–±—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
deploy_containers() {
    log_info "–ó–±—ñ—Ä–∫–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    
    # –ó—É–ø–∏–Ω–∫–∞ —ñ—Å–Ω—É—é—á–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    docker-compose down 2>/dev/null || true
    
    # –ó–±—ñ—Ä–∫–∞ –æ–±—Ä–∞–∑—ñ–≤
    log_info "–ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—ñ–≤..."
    docker-compose build --no-cache
    
    # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤
    log_info "–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    docker-compose up -d redis postgres
    
    # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    log_info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö..."
    sleep 15
    
    # –ó–∞–ø—É—Å–∫ —Ä–µ—à—Ç–∏ —Å–µ—Ä–≤—ñ—Å—ñ–≤
    log_info "–ó–∞–ø—É—Å–∫ –≤—Å—ñ—Ö —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    docker-compose up -d
    
    log_success "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω–æ"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤
health_check() {
    log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    
    max_attempts=30
    attempt=0
    
    services=("nginx:80" "analysis-service:8000" "email-service:8001" "web-interface:8002")
    
    for service in "${services[@]}"; do
        name=$(echo $service | cut -d: -f1)
        port=$(echo $service | cut -d: -f2)
        
        log_info "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ $name..."
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
            if curl -f -s http://localhost:$port/health > /dev/null 2>&1 || \
               curl -f -s http://localhost:$port/ > /dev/null 2>&1; then
                log_success "$name –¥–æ—Å—Ç—É–ø–Ω–∏–π"
                break
            fi
            
            attempt=$((attempt + 1))
            if [ $attempt -eq $max_attempts ]; then
                log_error "$name –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –ø—ñ—Å–ª—è $max_attempts —Å–ø—Ä–æ–±"
                return 1
            fi
            
            sleep 2
        done
    done
    
    log_success "–í—Å—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—Ä–∞—Ü—é—é—Ç—å"
}

# –ü–æ–∫–∞–∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
show_deployment_info() {
    echo ""
    echo "üéâ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
    echo "=================================="
    echo ""
    echo "üåê –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://$DOMAIN"
    echo "üîç API –∞–Ω–∞–ª—ñ–∑—É: http://$DOMAIN/api/analysis/"
    echo "üìß API email: http://$DOMAIN/api/email/"
    echo ""
    echo "üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥:"
    echo "   Prometheus: http://$DOMAIN:9090 (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)"
    echo "   Grafana: http://$DOMAIN:3000 (—è–∫—â–æ —É–≤—ñ–º–∫–Ω–µ–Ω–æ)"
    echo ""
    echo "üîß –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è:"
    echo "   –°—Ç–∞—Ç—É—Å: docker-compose ps"
    echo "   –õ–æ–≥–∏: docker-compose logs -f"
    echo "   –ó—É–ø–∏–Ω–∫–∞: docker-compose down"
    echo "   –û–Ω–æ–≤–ª–µ–Ω–Ω—è: ./scripts/update.sh"
    echo "   –†–µ–∑–µ—Ä–≤–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è: ./scripts/backup.sh"
    echo ""
    echo "üìÅ –í–∞–∂–ª–∏–≤—ñ —Ñ–∞–π–ª–∏:"
    echo "   –õ–æ–≥–∏: ./logs/"
    echo "   –î–∞–Ω—ñ: ./data/"
    echo "   –†–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó: ./backups/"
    echo ""
}

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
main() {
    echo "–ü–æ—á–∏–Ω–∞—î–º–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è..."
    
    check_dependencies
    setup_environment
    create_directories
    setup_ssl
    deploy_containers
    
    log_info "–û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
    sleep 30
    
    if health_check; then
        show_deployment_info
    else
        log_error "–î–µ—è–∫—ñ —Å–µ—Ä–≤—ñ—Å–∏ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—è. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏: docker-compose logs"
        exit 1
    fi
}

# –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
case "${1:-}" in
    "monitoring")
        log_info "–ó–∞–ø—É—Å–∫ –∑ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥–æ–º..."
        export COMPOSE_PROFILES=monitoring
        main
        ;;
    "ssl")
        setup_ssl
        ;;
    "check")
        health_check
        ;;
    *)
        main
        ;;
esac